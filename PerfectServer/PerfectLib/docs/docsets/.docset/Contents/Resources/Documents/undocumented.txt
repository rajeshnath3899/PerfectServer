LogManager.swift
	public class LogManager
Closeable.swift
	public protocol Closeable
	func close()
	func doWithClose(c: ()->())
	public protocol Closeable
	public func doWithClose(c: ()->())
NetNamedPipe.swift
	public override func sockName() -> (String, UInt16)
	public override func peerName() -> (String, UInt16)
Threading.swift
	public func doWithLock(closure: () -> ())
WebSocketHandler.swift
	case Continuation = 0x0, Text = 0x1, Binary = 0x2, Close = 0x8, Ping = 0x9, Pong = 0xA, Invalid
	case Continuation = 0x0, Text = 0x1, Binary = 0x2, Close = 0x8, Ping = 0x9, Pong = 0xA, Invalid
	case Continuation = 0x0, Text = 0x1, Binary = 0x2, Close = 0x8, Ping = 0x9, Pong = 0xA, Invalid
	case Continuation = 0x0, Text = 0x1, Binary = 0x2, Close = 0x8, Ping = 0x9, Pong = 0xA, Invalid
	case Continuation = 0x0, Text = 0x1, Binary = 0x2, Close = 0x8, Ping = 0x9, Pong = 0xA, Invalid
	case Continuation = 0x0, Text = 0x1, Binary = 0x2, Close = 0x8, Ping = 0x9, Pong = 0xA, Invalid
	case Continuation = 0x0, Text = 0x1, Binary = 0x2, Close = 0x8, Ping = 0x9, Pong = 0xA, Invalid
	public init(handlerProducer: HandlerProducer)
	public func handleRequest(request: WebRequest, response: WebResponse)
PageHandler.swift
	public static func addRequestHandler(generator: RequestHandlerGenerator)
	public protocol RequestHandler
	func handleRequest(request: WebRequest, response: WebResponse)
HTTP2.swift
	public struct HTTP2Frame
	public class HTTP2WebRequest: WebRequest
	public class HTTP2WebResponse: WebResponse, HeaderListener
	public func addHeader(name: [UInt8], value: [UInt8], sensitive: Bool)
	public class HTTP2Client
	public init()
	public func close()
	public var isConnected: Bool
	public func connect(host: String, port: UInt16, ssl: Bool, timeoutSeconds: Double, callback: (Bool) -> ())
	public func createRequest() -> HTTP2WebRequest
	public func sendRequest(request: WebRequest, callback: (WebResponse?, String?) -> ())
Utilities.swift
	public var stringByDecodingURL: String?
	public var decodeHex: [UInt8]?
	public static func fromUUID(uuid: uuid_t) -> String
	public func empty_uuid() -> uuid_t
	public func random_uuid() -> uuid_t
	public func stringByReplacingString(find: String, withString: String) -> String
	public func substringTo(index: String.Index) -> String
	public func substringWith(range: Range<String.Index>) -> String
	public func rangeOf(string: String, ignoreCase: Bool = false) -> Range<String.Index>?
	public func contains(string: String) -> Bool
JSONConvertible.swift
	public static let objectIdentifierKey = "_jsonobjid"
	static public func registerJSONDecodable(name: String, creator: JSONConvertibleObjectCreator)
	static public func createJSONConvertibleObject(values:[String:Any]) -> JSONConvertibleObject?
	static public func createJSONConvertibleObject(name: String, values:[String:Any]) -> JSONConvertibleObject?
	public protocol JSONConvertible
	public class JSONConvertibleObject: JSONConvertible
	public init() {}
	public func setJSONValues(values:[String:Any]) {}
	public func getJSONValues() -> [String:Any] { return [String:Any]() }
	public func jsonEncodedString() throws -> String
	public class JSONConvertibleObject : JSONConvertible
	func getJSONValue<T: JSONConvertible>(named: String, from:[String:Any], defaultValue: T) -> T
	public enum JSONConversionError: ErrorType
	case NotConvertible(Any)
	case InvalidKey(Any)
	case SyntaxError
	public struct JSONConvertibleNull: JSONConvertible
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonEncodedString() throws -> String
	public func jsonDecode() throws -> JSONConvertible
NetTCP.swift
	public func sockName() -> (String, UInt16)
	public func peerName() -> (String, UInt16)
StaticFileHandler.swift
	public class StaticFileHandler: RequestHandler
	public init() {}
	public func handleRequest(request: WebRequest, response: WebResponse)
WebRequest.swift
	public lazy var documentRoot: String =
	public func setRequestMethod(method: String)
	public func setRequestURI(uri: String)
HPACK.swift
	public enum Exception: ErrorType
	case DecompressionException, IllegalIndexValue, InvalidMaxDynamicTableSize, MaxDynamicTableSizeChangeRequested
	case DecompressionException, IllegalIndexValue, InvalidMaxDynamicTableSize, MaxDynamicTableSizeChangeRequested
	case DecompressionException, IllegalIndexValue, InvalidMaxDynamicTableSize, MaxDynamicTableSizeChangeRequested
	case DecompressionException, IllegalIndexValue, InvalidMaxDynamicTableSize, MaxDynamicTableSizeChangeRequested
NetTCPSSL.swift
	public class NetTCPSSL : NetTCP
	public static var opensslVersionText : String
	public static var opensslVersionNumber : Int
	public class X509
	public var publicKeyBytes: [UInt8]
	public var keyFilePassword: String = ""
	public var peerCertificate: X509?
	public var cipherList: [String]
	public func setTmpDH(path: String) -> Bool
	public var usingSSL: Bool
	public override init()
	override public func initSocket()
	public func errorCode() -> UInt
	public func sslErrorCode(resultCode: Int32) -> Int32
	public func errorStr(errorCode: Int32) -> String
	public func reasonErrorStr(errorCode: Int32) -> String
	public override func close()
	public func beginSSL(closure: (Bool) -> ())
	public func beginSSL(timeout: Double, closure: (Bool) -> ())
	public func endSSL()
	public func shutdown()
	public func setConnectState()
	public func setAcceptState()
	public func setDefaultVerifyPaths() -> Bool
	public func setVerifyLocations(caFilePath: String, caDirPath: String) -> Bool
	public func useCertificateFile(cert: String) -> Bool
	public func useCertificateChainFile(cert: String) -> Bool
	public func usePrivateKeyFile(cert: String) -> Bool
	public func checkPrivateKey() -> Bool
	override public func forEachAccept(callBack: (NetTCP?) -> ())
	override public func accept(timeoutSeconds: Double, callBack: (NetTCP?) -> ()) throws
WebResponse.swift
	public let name: String?
	public let value: String?
	public let domain: String?
	public let expires: String?
	public let expiresIn: Double // seconds from now. may be negative. 0.0 means no expiry (session cookie)
	public let path: String?
	public let secure: Bool?
	public let httpOnly: Bool?
	public init(name: String?,
		value: String?,
		domain: String?,
		expires: String?,
		expiresIn: Double,
		path: String?,
		secure: Bool?,
		httpOnly: Bool?)
	public var requestCompletedCallback: () -> () = {}
	public func appendBodyBytes(bytes: [UInt8])
	public func appendBodyString(string: String)
NotificationPusher.swift
	case AlertBody(String)
	case AlertTitle(String)
	case AlertTitleLoc(String, [String]?)
	case AlertActionLoc(String)
	case AlertLoc(String, [String]?)
	case AlertLaunchImage(String)
	case Badge(Int)
	case Sound(String)
	case ContentAvailable
	case Category(String)
	case CustomPayload(String, Any)
	public init()
